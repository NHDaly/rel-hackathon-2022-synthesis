
// @inline
// def synthesize:expensive[GRAPH, a, b, name] = 
//     ...



// Shortest Path?

def my_graph = Undirected
def Directed = Movies


@inline def cnil[x] = last[hash[(:nil, x)]]
@inline def ccons[x, p] = last[hash[(:cons, x, p)]]

with my_graph use nil, head, tail, length, shortest_path, node, edge, show

def my_graph:length[p] = 0, nil(_, p)
def my_graph:length[p] = 1 + length[tail[p]]
def my_graph:shortest_distance[x, y] = length[shortest_path[x, y]]
def my_graph:show[x in node] = string[x]
def my_graph:show[p] = show[x], nil(x, p) from x
// def my_graph:show[p] = concat[concat[show[head[p]], " -> "], show[tail[p]]]
// def my_graph:show[p] = concat[concat[show[head[p]], concat[" -[", concat["label", "]->"]], show[tail[p]]]
def my_graph:show[p] = concat[concat[show[head[p]], concat[concat[" -[",e], "]-> "]], show[tail[p]]]
    from e
    where
    Directed:edge(e, head[p], head[tail[p]]) 
    
def my_graph:show[p] = concat[concat[show[head[p]], concat[concat[" <-[",e], "]- "]], show[tail[p]]]
    from e
    where
    Directed:edge(e, head[tail[p]], head[p]) or
    (not Directed:edge(e, head[tail[p]], head[p]) and e = "")
    

def my_graph = (:nil, x, cnil[x]) from x in node
def my_graph =
    (:shortest_path, x, y, ccons[x, p2]);
    (:head, ccons[x, p2], x);
    (:tail, ccons[x, p2], p2)
    from x, y, p2
    where p2 = argmin[length[p] for p where my_graph:candidate(x, y, p)]

def my_graph:candidate[x, y] = nil[y], edge(_, x, y)
def my_graph:candidate[x, y] = edge[_, x] . shortest_path[y]


// Return value
def info[x, y] = length[shortest_path[x, y]], show[shortest_path[x, y]]

// def output = info["Tom Hanks", "Aladdin"]
// def output = info
